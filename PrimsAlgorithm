#include<bits/stdc++.h>
using namespace std;

class Graph{
	public:
	int v;
	vector<pair<int,pair<int,int>>> *adj;
	vector<int> distance;
	vector<int> path;
	vector<bool> mst;
	Graph(int ve)
	{
		v=ve;
		adj = new vector<pair<int,pair<int,int>>>[ve];
		distance.resize(ve);
		fill(distance.begin(),distance.end(),INT_MAX);
		path.resize(ve);
		fill(path.begin(),path.end(),-1);
		mst.resize(ve);
		fill(mst.begin(),mst.end(),false);
	}
	void addEdge(int s,int v,int wt)
	{
		adj[s].push_back(make_pair(s,make_pair(v,wt)));
	}
	void primMST(int s)
	{
		priority_queue<pair<int,int>,vector<pair<int,int>> , greater<pair<int,int>>> q;
		q.push(make_pair(0,s));
		distance[s]=0;
		mst[s]=true;
		while(!q.empty())
		{
		        pair<int,int> t = q.top();
		        int dist = t.first;
		        int source = t.second;
		        q.pop();
		        mst[source]=true;
		        for(int i=0;i<adj[source].size();i++)
		        {
		        	int curr = adj[source][i].second.first;
		        	int wt = adj[source][i].second.second;
		        	if(!mst[curr]&&distance[curr]>dist+wt)
		        	{distance[curr] = wt;
		        	q.push(make_pair(distance[curr],curr));
		        	path[curr]=source;}
		        }
		}
	}
};

int main(){
	 int V = 9;
    Graph g(V);
 
    //  making above shown graph
    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);
 
    g.primMST(0);
    cout<<"Prims path "<<endl;
    
    for(int i=0;i<V;i++)
    cout<<g.path[i]<<" "<<i<<endl;
}

**OUTPUT**

Prims path 
-1 0
0 1
1 2
2 3
3 4
2 5
5 6
6 7
2 8
