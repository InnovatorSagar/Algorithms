#include<bits/stdc++.h>
using namespace std;

class Graph{public:
	int v;
	vector<int> *adj;
	Graph(int v)
	{
		this->v = v;
		adj = new vector<int>[this->v];
	}
	
	void addEdge(int u,int v)
	{
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	
	void DFS(int s,bool visited[])
	{
		visited[s]=true;
		for(int i=0;i<adj[s].size();i++)
		if(!visited[adj[s][i]])
		DFS(adj[s][i],visited);
	}
	
	bool isConnected(){
		
		bool visited[v];
		for(int i=0;i<v;i++)
		visited[i]=false;
		int i;
		for( i=0;i<v;i++)
		if(adj[i].size()!=0)
		break;
		
		if(i==v)
		return true;
		
		DFS(i,visited);
		
		for(int i=0;i<v;i++)
		if(!visited[i]&&adj[i].size()>0)
		return false;
		
		return true;
	}
	
	int isEulerPath(){
		if(isConnected()==false)
		return 0;
		
		int odd=0;
		for(int i=0;i<v;i++)
		if(adj[i].size()&1)
		{odd++;
		}
		if(odd>2)
		return 0;
		return (odd)?1:2;
	}
	
	void test()
	{
	  int res = isEulerPath();
	  if(res==0)
	  cout<<"No Euler Path"<<endl;
	  else if(res==1)
	  cout<<"Contain's Euler Path\n";
	  else cout<<"Contain's Euler Cycle"<<endl;
	}
};

int main(){
	Graph g1(5);
    g1.addEdge(1, 0);
    g1.addEdge(0, 2);
    g1.addEdge(2, 1);
    g1.addEdge(0, 3);
    g1.addEdge(3, 4);
    g1.test();
 
    Graph g2(5);
    g2.addEdge(1, 0);
    g2.addEdge(0, 2);
    g2.addEdge(2, 1);
    g2.addEdge(0, 3);
    g2.addEdge(3, 4);
    g2.addEdge(4, 0);
    g2.test();
 
    Graph g3(5);
    g3.addEdge(1, 0);
    g3.addEdge(0, 2);
    g3.addEdge(2, 1);
    g3.addEdge(0, 3);
    g3.addEdge(3, 4);
    g3.addEdge(1, 3);
    g3.test();
 
    // Let us create a graph with 3 vertices
    // connected in the form of cycle
    Graph g4(3);
    g4.addEdge(0, 1);
    g4.addEdge(1, 2);
    g4.addEdge(2, 0);
    g4.test();
 
    // Let us create a graph with all veritces
    // with zero degree
    Graph g5(3);
    g5.test();
 
}

**OUTPUT**

Contain's Euler Path
Contain's Euler Cycle
No Euler Path
Contain's Euler Cycle
Contain's Euler Cycle
