#include<bits/stdc++.h>
using namespace std;

struct Building{
	int x;
	int ht;
	int y;
};

struct Point{
	int x;
	int ht;
	int isStart;
};

bool compare(Point p1,Point p2)
{

/*Case:1 if both are at different starting points, return the earlier one. 
  Case:2 if both the buildings have their starting edge, choose the building which have large height.
  Case:3 if both the buildings have their ending edge, choose the building which is shoter in height.
  Case:4 if one building have starting edge and the other have ending edge, choose the building with starting edge.*/

	if(p1.x!=p2.x)  
	return p1.x<p2.x;
	else if(p1.isStart&&p2.isStart)
	return p1.ht>p2.ht;
	else if(!p1.isStart&&!p2.isStart)
	return p1.ht<p2.ht;
	else if(p1.isStart&&!p2.isStart)
	return p1.isStart;
	else return p2.isStart;
}

struct Result{
	int x;
	int ht;
};

vector<Result> solve(Building b[],int n)
{
	int len = n*2;
	
	Point p[len];
	
	int index=0;
	
	for(int i=0;i<n;i++)
	{
		p[index].x=b[i].x;
		p[index].ht=b[i].ht;
		p[index].isStart=true;
		
		p[index+1].x=b[i].y;
		p[index+1].ht=b[i].ht;
		p[index+1].isStart=false;
		
		index+=2;
	}
	
	// cout<<"*******PRINTING PRIOR TO SORTING********\n";
	// for(int i=0;i<len;i++)
	// cout<<p[i].x<<" "<<p[i].ht<<" "<<p[i].isStart<<endl;
	
	sort(p,p+len,compare);
	
	// cout<<endl<<"***********PRINTING AFTER SORTING**********\n";
	// for(int i=0;i<len;i++)
	// cout<<p[i].x<<" "<<p[i].ht<<" "<<p[i].isStart<<endl;
	
	multiset<int,greater<int>> mp;
	mp.insert(0);
	int prevHeight = 0;
	vector<Result> res;
	for(int i=0;i<len;i++)
	{
		int height = p[i].ht;
		if(p[i].isStart)
		{
			mp.insert(height);
		}
		else{
			if(mp.count(height)>0)
			mp.erase(height);
		}
		
		int maxHeight = *mp.begin();
		if(maxHeight!=prevHeight)
		{   Result r = {p[i].x,maxHeight};
			res.push_back(r);
			prevHeight=maxHeight;
		}
	}
   return res;;
}

int main(){
	
	Building arr[] = {{1, 11, 5}, {2, 6, 7}, {3, 13, 9},{12, 7, 16}, {14, 3, 25}, {19, 18, 22},{23, 13, 29}, {24, 4, 28}};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout<<"The Skyline for given buildings is: "<<endl;
    
    vector<Result> res = solve(arr,n);
    cout<<"(";
    for(int i=0;i<res.size();i++)
    {
    	Result s = res[i];
    	if(i==res.size()-1)
    	cout<<"("<<s.x<<","<<s.ht<<")";
    	else
    	cout<<"("<<s.x<<","<<s.ht<<"),";
    }
    cout<<")\n";
}

**OUTPUT**

The Skyline for given buildings is: 
((1,11),(3,13),(9,0),(12,7),(16,3),(19,18),(22,3),(23,13),(29,0))
