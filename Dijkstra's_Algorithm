    #include<bits/stdc++.h>
    using namespace std;
     
    class Graph{
    	public:
    	int v;
    	vector<pair<int,int>> *adj;
    	vector<int> distance;
    	//vector<int,pair<int,int>> *Edge;
    	Graph(int ver)
    	{
    		v = ver;
    		adj = new vector<pair<int,int>>[ver];
    		distance.resize(ver);
    		fill(distance.begin(),distance.end(),-1);
    	}
    	void addEdge(int s, int v,int wt)
    	{
    	 	adj[s].push_back(make_pair(v,wt));
    	 	adj[v].push_back(make_pair(s,wt));
    	}
     
    	void dijkstraPath(int s)
    	{
    	      priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> >q;
    	      q.push(make_pair(0,s));
    	      distance[s]=0;
    	      while(!q.empty())
    	      {
    	      	pair<int,int> t = q.top();
    	      	q.pop();
    	      	int source = t.second;
    	      	int dist = t.first;
    	      	for(int i=0;i<adj[source].size();i++)
    	      	{
    	      		int curr = adj[source][i].first;
    	      		int wt = adj[source][i].second;
    	      		if(distance[curr]==-1)
    	      		{
    	      			distance[curr] = dist+wt;
    	      			q.push(make_pair(distance[curr],curr));
    	      		}
    	      		else if(distance[curr]>dist+wt)
    	      		{
    	      			distance[curr] = dist+wt;
    	      			q.push(make_pair(distance[curr],curr));
    	      		}
    	      	}
    	      }
    	}
    };
     
    int main(){
    	Graph g(9);
        g.addEdge(0, 1, 4);
        g.addEdge(0, 7, 8);
        g.addEdge(1, 2, 8);
        g.addEdge(1, 7, 11);
        g.addEdge(2, 3, 7);
        g.addEdge(2, 8, 2);
        g.addEdge(2, 5, 4);
        g.addEdge(3, 4, 9);
        g.addEdge(3, 5, 14);
        g.addEdge(4, 5, 10);
        g.addEdge(5, 6, 2);
        g.addEdge(6, 7, 1);
        g.addEdge(6, 8, 6);
        g.addEdge(7, 8, 7);
        g.dijkstraPath(0);
     
        for(int i=0;i<9;i++)
        cout<<i<<" "<<g.distance[i]<<endl;
    }
